{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red195\green123\blue90;\red23\green23\blue26;\red160\green180\blue107;
\red174\green176\blue183;\red160\green140\blue102;\red89\green158\blue96;\red38\green157\blue169;\red103\green107\blue114;
\red191\green100\blue38;}
{\*\expandedcolortbl;;\csgenericrgb\c76471\c48235\c35294;\csgenericrgb\c9020\c9020\c10196;\csgenericrgb\c62745\c70588\c41961;
\csgenericrgb\c68235\c69020\c71765;\csgenericrgb\c62745\c54902\c40000;\csgenericrgb\c34902\c61961\c37647;\csgenericrgb\c14902\c61569\c66275;\csgenericrgb\c40392\c41961\c44706;
\csgenericrgb\c74902\c39216\c14902;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 if \cf4 strings\cf5 \cb3 .\cf6 \cb3 Index\cf5 \cb3 (opcode, \cf7 \cb3 "111100101"\cf5 \cb3 ) == \cf8 \cb3 0 \cf5 \cb3 \{ \cf9 \cb3 //MOVK instruction MAITLAND\
	\cf5 \cb3 opCode := instructionCode[\cf8 \cb3 0\cf5 \cb3 :\cf8 \cb3 9\cf5 \cb3 ]\
	shamtStr := instructionCode[\cf8 \cb3 9\cf5 \cb3 :\cf8 \cb3 11\cf5 \cb3 ]\
	ImediateValue := instructionCode[\cf8 \cb3 11\cf5 \cb3 :\cf8 \cb3 27\cf5 \cb3 ]\
	rd := instructionCode[\cf8 \cb3 27\cf5 \cb3 :\cf8 \cb3 32\cf5 \cb3 ]\
\
	ImediateNum, _ := \cf4 \cb3 strconv\cf5 \cb3 .\cf6 \cb3 ParseInt\cf5 \cb3 (ImediateValue, \cf8 \cb3 2\cf5 \cb3 , \cf8 \cb3 16\cf5 \cb3 )\
	rdNum, _ := \cf4 \cb3 strconv\cf5 \cb3 .\cf6 \cb3 ParseInt\cf5 \cb3 (rd, \cf8 \cb3 2\cf5 \cb3 , \cf8 \cb3 5\cf5 \cb3 )\
	\
\
	formattedString := \cf4 \cb3 fmt\cf5 \cb3 .\cf6 \cb3 Sprintf\cf5 \cb3 (\cf7 \cb3 "\cf2 %s %s %s %s\cf7 "\cf5 \cb3 , opCode, shamtStr, ImediateValue, rd)\
\
	formattedString = \cf4 \cb3 fmt\cf5 \cb3 .\cf6 \cb3 Sprintf\cf5 \cb3 (\cf7 \cb3 "\cf2 %s\\t\cf7 "\cf5 \cb3 , formattedString)\
\
	\cf2 \cb3 var \cf5 \cb3 shamtValue \cf10 \cb3 int64 \cf5 \cb3 = \cf8 \cb3 100\
	\cf5 \cb3 shamt, _ := \cf4 \cb3 strconv\cf5 \cb3 .\cf6 \cb3 ParseInt\cf5 \cb3 (shamtStr, \cf8 \cb3 2\cf5 \cb3 , \cf8 \cb3 4\cf5 \cb3 )\
\
	\cf2 \cb3 switch \cf5 \cb3 shamt \{\
	\cf2 \cb3 case \cf8 0\cf5 \cb3 :\
		shamtValue = \cf8 \cb3 0\
	\cf2 case \cf8 1\cf5 \cb3 :\
		shamtValue = \cf8 \cb3 16\
	\cf2 case \cf8 2\cf5 \cb3 :\
		shamtValue = \cf8 \cb3 32\
	\cf2 case \cf8 3\cf5 \cb3 :\
		shamtValue = \cf8 \cb3 48\
	\cf2 default\cf5 \cb3 :\
		\cf4 \cb3 fmt\cf5 \cb3 .\cf6 \cb3 Println\cf5 \cb3 (\cf7 \cb3 "Invalid shamt value:"\cf5 \cb3 , shamt)\
		\cf2 \cb3 return \cf7 ""\
	\cf5 \cb3 \}\
\
	\cf2 \cb3 return \cf4 fmt\cf5 \cb3 .Sprintf(\cf7 \cb3 "%s\cf2 \\t\cf7 "\cf5 \cb3 , strconv.FormatInt(int64(ProgramCounter), \cf8 \cb3 10\cf5 \cb3 )) + formattedString + \cf7 \cb3 "MOVK\cf2 \\t\cf7 " \cf5 \cb3 +\
		\cf7 \cb3 "R" \cf5 \cb3 + rdNum + \cf7 \cb3 ", " \cf5 \cb3 + ImediateNum + \cf7 \cb3 ", LSL " \cf5 \cb3 + \cf4 \cb3 strconv\cf5 \cb3 .\cf6 \cb3 FormatInt\cf5 \cb3 (shamtValue, \cf8 \cb3 10\cf5 \cb3 ) + \cf7 \cb3 "\cf2 \\n\cf7 "\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 \cb3 \}\
\
}